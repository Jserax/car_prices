version: '3.8'
x-airflow-common:
  &airflow-common
  image: skyraxer/docker-airflow:latest
  env_file:
    - .env
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    - AIRFLOW__CORE__LOAD_EXAMPLES=False
    - AIRFLOW__CORE__LOGGING_LEVEL=INFO
  volumes:
    - ./docker-airflow/dags:/opt/airflow/dags
    - /var/run/docker.sock:/var/run/docker.sock
  networks:
    - postgres
    - minio


services:  
    postgres:
        restart: always
        image: postgres:13
        container_name: postgres
        environment:
            - POSTGRES_DB=postgres
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
        ports:
            - "5432:5432" 
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./docker-airflow/init_airflow_db.sql:/docker-entrypoint-initdb.d/init_airflow_db.sql
        networks:
            - postgres

    minio:
        restart: always
        image: minio/minio:latest
        container_name: minio
        ports:
            - "9000:9000"
            - "9001:9001"
        environment:
            - MINIO_ROOT_USER=admin
            - MINIO_ROOT_PASSWORD=admin123
        command: server /data --console-address ":9001"
        volumes:
            - minio_data:/data
        networks:
            - minio

    mlflow:
        image: skyraxer/mlflow:latest
        container_name: mlflow
        environment:
            - AWS_ACCESS_KEY_ID=admin
            - AWS_SECRET_ACCESS_KEY=admin123
            - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
        ports:
            - "5000:5000"
        command: mlflow server -w 1 --backend-store-uri postgresql://postgres:postgres@postgres/postgres --default-artifact-root s3://mlflow --host 0.0.0.0 --port 5000      
        networks:
            - postgres 
            - minio
        depends_on:
            - postgres
            - minio

    airflow-init:
        << : *airflow-common
        container_name: airflow-init
        entrypoint: /bin/bash
        command:
            - -c
            - |
              airflow db init
              airflow users create -r Admin -u admin -f admin -l admin -e admin@airflow.org -p admin
              airflow db upgrade
        restart: on-failure
        depends_on:
            - postgres

    airflow-webserver:
        << : *airflow-common
        restart: always
        container_name: airflow-webserver
        ports:
            - 8080:8080
        command: airflow webserver -w 1
        depends_on:
            - postgres
            - airflow-init

    airflow-scheduler:
        << : *airflow-common
        restart: always 
        container_name: airflow-scheduler
        command: airflow scheduler
        depends_on:
            - postgres
            - airflow-init

networks:
  postgres:
    driver: overlay
  minio:
    driver: overlay  
volumes:
    postgres_data: 
    minio_data: 
    